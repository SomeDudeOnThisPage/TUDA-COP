package ExerciseLanguage.actions;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class ClassFactories {
  private static final Logger LOG = LogManager.getLogger(ClassFactories.class);
  public static class NodeFactory_8163210767089579391 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      LoggingRuntime.logMsgView(Level.DEBUG, BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(ListSequence.fromList(SNodeOperations.getNodeAncestors(enclosingNode, CONCEPTS.ClassConcept$S3, false)).first()), ClassFactories.class, null, null);
      SLinkOperations.setTarget(newNode, LINKS.reference$sXZd, ListSequence.fromList(SNodeOperations.getNodeAncestors(enclosingNode, CONCEPTS.ClassConcept$S3, false)).first());
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ClassConcept$S3 = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e6e1429L, "ExerciseLanguage.structure.ClassConcept");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink reference$sXZd = MetaAdapterFactory.getReferenceLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L, 0x6930950f81a11a82L, "reference");
  }
}
