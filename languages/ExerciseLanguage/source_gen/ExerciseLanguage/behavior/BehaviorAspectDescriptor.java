package ExerciseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIEvaluatable__BehaviorDescriptor = new IEvaluatable__BehaviorDescriptor();
  private final BHDescriptor myClassRegistry__BehaviorDescriptor = new ClassRegistry__BehaviorDescriptor();
  private final BHDescriptor myFunctionExpression__BehaviorDescriptor = new FunctionExpression__BehaviorDescriptor();
  private final BHDescriptor myOperatorUnaryNot__BehaviorDescriptor = new OperatorUnaryNot__BehaviorDescriptor();
  private final BHDescriptor myClassConcept__BehaviorDescriptor = new ClassConcept__BehaviorDescriptor();
  private final BHDescriptor myIVariableDeclaration__BehaviorDescriptor = new IVariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myOperatorEquals__BehaviorDescriptor = new OperatorEquals__BehaviorDescriptor();
  private final BHDescriptor myOperatorGreaterThan__BehaviorDescriptor = new OperatorGreaterThan__BehaviorDescriptor();
  private final BHDescriptor myOperatorLessThan__BehaviorDescriptor = new OperatorLessThan__BehaviorDescriptor();
  private final BHDescriptor myOperatorOr__BehaviorDescriptor = new OperatorOr__BehaviorDescriptor();
  private final BHDescriptor myOperatorAnd__BehaviorDescriptor = new OperatorAnd__BehaviorDescriptor();
  private final BHDescriptor myBinaryExpression__BehaviorDescriptor = new BinaryExpression__BehaviorDescriptor();
  private final BHDescriptor myOperator__BehaviorDescriptor = new Operator__BehaviorDescriptor();
  private final BHDescriptor myOperatorAdd__BehaviorDescriptor = new OperatorAdd__BehaviorDescriptor();
  private final BHDescriptor myConstantIntegerExpression__BehaviorDescriptor = new ConstantIntegerExpression__BehaviorDescriptor();
  private final BHDescriptor myBlock__BehaviorDescriptor = new Block__BehaviorDescriptor();
  private final BHDescriptor myOperatorAssign__BehaviorDescriptor = new OperatorAssign__BehaviorDescriptor();
  private final BHDescriptor myOperatorMultiply__BehaviorDescriptor = new OperatorMultiply__BehaviorDescriptor();
  private final BHDescriptor myConstantBooleanExpression__BehaviorDescriptor = new ConstantBooleanExpression__BehaviorDescriptor();
  private final BHDescriptor myReferenceExpression__BehaviorDescriptor = new ReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor mySelfReferenceExpression__BehaviorDescriptor = new SelfReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myUnaryExpression__BehaviorDescriptor = new UnaryExpression__BehaviorDescriptor();
  private final BHDescriptor myOperatorMinus__BehaviorDescriptor = new OperatorMinus__BehaviorDescriptor();
  private final BHDescriptor myOperatorUnaryMinus__BehaviorDescriptor = new OperatorUnaryMinus__BehaviorDescriptor();
  private final BHDescriptor myBracketExpression__BehaviorDescriptor = new BracketExpression__BehaviorDescriptor();
  private final BHDescriptor myObjectInstantiationExpression__BehaviorDescriptor = new ObjectInstantiationExpression__BehaviorDescriptor();
  private final BHDescriptor myNullExpression__BehaviorDescriptor = new NullExpression__BehaviorDescriptor();
  private final BHDescriptor myClassFunctionAccessExpression__BehaviorDescriptor = new ClassFunctionAccessExpression__BehaviorDescriptor();
  private final BHDescriptor myDeclarationExpression__BehaviorDescriptor = new DeclarationExpression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBinaryExpression__BehaviorDescriptor;
      case 1:
        return myBlock__BehaviorDescriptor;
      case 2:
        return myBracketExpression__BehaviorDescriptor;
      case 3:
        return myClassConcept__BehaviorDescriptor;
      case 4:
        return myClassFunctionAccessExpression__BehaviorDescriptor;
      case 5:
        return myClassRegistry__BehaviorDescriptor;
      case 6:
        return myConstantBooleanExpression__BehaviorDescriptor;
      case 7:
        return myConstantIntegerExpression__BehaviorDescriptor;
      case 8:
        return myDeclarationExpression__BehaviorDescriptor;
      case 9:
        return myFunctionExpression__BehaviorDescriptor;
      case 10:
        return myIEvaluatable__BehaviorDescriptor;
      case 11:
        return myIVariableDeclaration__BehaviorDescriptor;
      case 12:
        return myNullExpression__BehaviorDescriptor;
      case 13:
        return myObjectInstantiationExpression__BehaviorDescriptor;
      case 14:
        return myOperator__BehaviorDescriptor;
      case 15:
        return myOperatorAdd__BehaviorDescriptor;
      case 16:
        return myOperatorAnd__BehaviorDescriptor;
      case 17:
        return myOperatorAssign__BehaviorDescriptor;
      case 18:
        return myOperatorEquals__BehaviorDescriptor;
      case 19:
        return myOperatorGreaterThan__BehaviorDescriptor;
      case 20:
        return myOperatorLessThan__BehaviorDescriptor;
      case 21:
        return myOperatorMinus__BehaviorDescriptor;
      case 22:
        return myOperatorMultiply__BehaviorDescriptor;
      case 23:
        return myOperatorOr__BehaviorDescriptor;
      case 24:
        return myOperatorUnaryMinus__BehaviorDescriptor;
      case 25:
        return myOperatorUnaryNot__BehaviorDescriptor;
      case 26:
        return myReferenceExpression__BehaviorDescriptor;
      case 27:
        return mySelfReferenceExpression__BehaviorDescriptor;
      case 28:
        return myUnaryExpression__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c22033L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x761b7b07134f4fe3L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e6e1429L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68aa7076bL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x1beda7bcefca4f4fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc795194f20L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bf57e9L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x7a038777eb3e63d8L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f40aacddL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x4c4ecad0893aec5fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a916078L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a4cf814L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bc9b1bL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bec7b7L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b495dbea9L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c62f7eL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b495ce63fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b495dbe91L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b495dbe99L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x729b0973be7a44efL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c90242L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b495dbea1L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x729b0973be7ab55dL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x33d0f1e7a6eb0f1cL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x71498cf12ef81aeaL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x729b0973be7a449fL)).seal();
}
