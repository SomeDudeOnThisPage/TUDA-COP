package ExerciseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.scopes.runtime.HidingByNameScope;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import jetbrains.mps.lang.scopes.runtime.SimpleScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Block__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c22033L, "ExerciseLanguage.structure.Block");

  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("52_Geb4QDV$").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Iterable<SNode>> getFunctions_id1aKtaYOveRg = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getFunctions").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1aKtaYOveRg").build();
  public static final SMethod<Iterable<SNode>> getExpressions_id5fpBculaQZI = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getExpressions").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5fpBculaQZI").build();
  public static final SMethod<Iterable<SNode>> getParameters_id32PWdt9VPaP = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getParameters").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("32PWdt9VPaP").build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getScope_id52_Geb4QDV$, getFunctions_id1aKtaYOveRg, getExpressions_id5fpBculaQZI, getParameters_id32PWdt9VPaP);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, final SNode child) {

    if (SConceptOperations.isExactly(SNodeOperations.asSConcept(kind), CONCEPTS.FunctionDeclaration$9R)) {


      ListScope functions = ListScope.forNamedElements(SNodeOperations.getNodeAncestors(child, CONCEPTS.FunctionDeclaration$9R, false));
      return new HidingByNameScope(CONCEPTS.FunctionDeclaration$9R, kind, functions, ScopeUtils.lazyParentScope(__thisNode__, kind));
    }

    ListScope vars = ListScope.forNamedElements(Block__BehaviorDescriptor.getExpressions_id5fpBculaQZI.invoke(__thisNode__));
    ListScope parameters = null;

    SimpleScope self = new SimpleScope(ListSequence.fromList(SNodeOperations.getNodeAncestors(child, CONCEPTS.ClassConcept$S3, false)).first()) {
      @Nullable
      @Override
      public String getReferenceText(@NotNull SNode target) {
        return "this";
      }
    };

    if (SNodeOperations.getParent(__thisNode__) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), CONCEPTS.FunctionDeclaration$9R)) {
      parameters = ListScope.forNamedElements(Block__BehaviorDescriptor.getParameters_id32PWdt9VPaP.invoke(__thisNode__, SNodeOperations.getNodeAncestors(child, CONCEPTS.FunctionDeclaration$9R, false)));
    }

    return new CompositeScope(vars, parameters, self, ScopeUtils.lazyParentScope(__thisNode__, kind));
  }
  /*package*/ static Iterable<SNode> getFunctions_id1aKtaYOveRg(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.body$6yby), CONCEPTS.FunctionDeclaration$9R);
  }
  /*package*/ static Iterable<SNode> getExpressions_id5fpBculaQZI(@NotNull SNode __thisNode__) {
    return SNodeOperations.ofConcept(SLinkOperations.collect(SNodeOperations.ofConcept(SLinkOperations.getChildren(__thisNode__, LINKS.body$6yby), CONCEPTS.BinaryExpression$lR), LINKS.left$sOE2), CONCEPTS.DeclarationExpression$SU);
  }
  /*package*/ static Iterable<SNode> getParameters_id32PWdt9VPaP(@NotNull SNode __thisNode__, List<SNode> funcDecs) {
    return SLinkOperations.collectMany(funcDecs, LINKS.parameters$7wvy);
  }

  /*package*/ Block__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      case 1:
        return (T) ((Iterable<SNode>) getFunctions_id1aKtaYOveRg(node));
      case 2:
        return (T) ((Iterable<SNode>) getExpressions_id5fpBculaQZI(node));
      case 3:
        return (T) ((Iterable<SNode>) getParameters_id32PWdt9VPaP(node, (List<SNode>) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FunctionDeclaration$9R = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, "ExerciseLanguage.structure.FunctionDeclaration");
    /*package*/ static final SConcept ClassConcept$S3 = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e6e1429L, "ExerciseLanguage.structure.ClassConcept");
    /*package*/ static final SConcept BinaryExpression$lR = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, "ExerciseLanguage.structure.BinaryExpression");
    /*package*/ static final SConcept DeclarationExpression$SU = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x7a038777eb3e63d8L, "ExerciseLanguage.structure.DeclarationExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink body$6yby = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c22033L, 0x5261d8e675c22034L, "body");
    /*package*/ static final SContainmentLink left$sOE2 = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, 0x5261d8e675bc9b1dL, "left");
    /*package*/ static final SContainmentLink parameters$7wvy = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, 0x665cd7dc02f6696cL, "parameters");
  }
}
