package ExerciseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.cells.KeyMap;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BinaryExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Block_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BracketExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ClassConcept_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ClassFunctionAccessExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ClassRegistry_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Comment_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ConstantBooleanExpression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ConstantIntegerExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Continue_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new DeclarationExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Else_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new For_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new FunctionArgument_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new FunctionDeclaration_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new FunctionExpression_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new FunctionParameter_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new If_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new If_Else_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new NullExpression_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new ObjectInstantiationExpression_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Operator_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ReferenceExpression_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new Return_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new SelfReferenceExpression_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new UnaryExpression_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new While_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new FunctionExpression_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ReferenceExpression_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<KeyMap> getDeclaredKeyMaps() {
    return Arrays.<KeyMap>asList(new ReferenceExpressionAccessor());
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c22033L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x761b7b07134f4fe3L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e6e1429L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68aa7076bL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x1beda7bcefca4f4fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f41df886L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc795194f20L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bf57e9L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f41f46f8L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x7a038777eb3e63d8L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b4957f72fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x4c4ecad089585d2aL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f43202c9L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e726720L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebcef043L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b4957f720L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5179ca4b4957f728L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a916078L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a4cf814L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bc9b1bL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f42bcef3L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x71498cf12ef81aeaL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x729b0973be7a449fL), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f41b7028L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L), MetaIdFactory.conceptId(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L)).seal();
}
