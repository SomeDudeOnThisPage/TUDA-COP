package ExerciseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BinaryExpression;
  private ConceptPresentation props_BinaryOperator;
  private ConceptPresentation props_Block;
  private ConceptPresentation props_BlockWorksheet;
  private ConceptPresentation props_BoolType;
  private ConceptPresentation props_BooleanDeclaration;
  private ConceptPresentation props_BracketExpression;
  private ConceptPresentation props_Class;
  private ConceptPresentation props_ConstantBooleanExpression;
  private ConceptPresentation props_ConstantIntegerExpression;
  private ConceptPresentation props_Else;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_FunctionArgument;
  private ConceptPresentation props_FunctionDeclaration;
  private ConceptPresentation props_FunctionExpression;
  private ConceptPresentation props_FunctionParameter;
  private ConceptPresentation props_IClassExpression;
  private ConceptPresentation props_IExpression;
  private ConceptPresentation props_IType;
  private ConceptPresentation props_IVariableDeclaration;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_If_Else;
  private ConceptPresentation props_IntType;
  private ConceptPresentation props_IntegerDeclaration;
  private ConceptPresentation props_Operator;
  private ConceptPresentation props_OperatorAdd;
  private ConceptPresentation props_OperatorAnd;
  private ConceptPresentation props_OperatorAssign;
  private ConceptPresentation props_OperatorEquals;
  private ConceptPresentation props_OperatorGreaterThan;
  private ConceptPresentation props_OperatorLessThan;
  private ConceptPresentation props_OperatorMultiply;
  private ConceptPresentation props_OperatorOr;
  private ConceptPresentation props_ReferenceExpression;
  private ConceptPresentation props_Worksheet;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BinaryExpression:
        if (props_BinaryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BinaryExpression = cpb.create();
        }
        return props_BinaryExpression;
      case LanguageConceptSwitch.BinaryOperator:
        if (props_BinaryOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinaryOperator = cpb.create();
        }
        return props_BinaryOperator;
      case LanguageConceptSwitch.Block:
        if (props_Block == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Block");
          props_Block = cpb.create();
        }
        return props_Block;
      case LanguageConceptSwitch.BlockWorksheet:
        if (props_BlockWorksheet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BlockWorksheet");
          props_BlockWorksheet = cpb.create();
        }
        return props_BlockWorksheet;
      case LanguageConceptSwitch.BoolType:
        if (props_BoolType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("boo");
          props_BoolType = cpb.create();
        }
        return props_BoolType;
      case LanguageConceptSwitch.BooleanDeclaration:
        if (props_BooleanDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BooleanDeclaration = cpb.create();
        }
        return props_BooleanDeclaration;
      case LanguageConceptSwitch.BracketExpression:
        if (props_BracketExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("(");
          props_BracketExpression = cpb.create();
        }
        return props_BracketExpression;
      case LanguageConceptSwitch.Class:
        if (props_Class == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("hallihallo");
          cpb.presentationByName();
          props_Class = cpb.create();
        }
        return props_Class;
      case LanguageConceptSwitch.ConstantBooleanExpression:
        if (props_ConstantBooleanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConstantBooleanExpression");
          props_ConstantBooleanExpression = cpb.create();
        }
        return props_ConstantBooleanExpression;
      case LanguageConceptSwitch.ConstantIntegerExpression:
        if (props_ConstantIntegerExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ConstantIntegerExpression");
          props_ConstantIntegerExpression = cpb.create();
        }
        return props_ConstantIntegerExpression;
      case LanguageConceptSwitch.Else:
        if (props_Else == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("else");
          cpb.rawPresentation("else");
          props_Else = cpb.create();
        }
        return props_Else;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.FunctionArgument:
        if (props_FunctionArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FunctionArgument");
          props_FunctionArgument = cpb.create();
        }
        return props_FunctionArgument;
      case LanguageConceptSwitch.FunctionDeclaration:
        if (props_FunctionDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("wer das liest ist doof");
          cpb.presentationByName();
          props_FunctionDeclaration = cpb.create();
        }
        return props_FunctionDeclaration;
      case LanguageConceptSwitch.FunctionExpression:
        if (props_FunctionExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L, 0x39275cb10e71ab9cL, "function", "", "");
          props_FunctionExpression = cpb.create();
        }
        return props_FunctionExpression;
      case LanguageConceptSwitch.FunctionParameter:
        if (props_FunctionParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FunctionParameter = cpb.create();
        }
        return props_FunctionParameter;
      case LanguageConceptSwitch.IClassExpression:
        if (props_IClassExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IClassExpression = cpb.create();
        }
        return props_IClassExpression;
      case LanguageConceptSwitch.IExpression:
        if (props_IExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IExpression = cpb.create();
        }
        return props_IExpression;
      case LanguageConceptSwitch.IType:
        if (props_IType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IType = cpb.create();
        }
        return props_IType;
      case LanguageConceptSwitch.IVariableDeclaration:
        if (props_IVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariableDeclaration = cpb.create();
        }
        return props_IVariableDeclaration;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.If_Else:
        if (props_If_Else == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if else");
          props_If_Else = cpb.create();
        }
        return props_If_Else;
      case LanguageConceptSwitch.IntType:
        if (props_IntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int");
          props_IntType = cpb.create();
        }
        return props_IntType;
      case LanguageConceptSwitch.IntegerDeclaration:
        if (props_IntegerDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("boop");
          cpb.presentationByName();
          props_IntegerDeclaration = cpb.create();
        }
        return props_IntegerDeclaration;
      case LanguageConceptSwitch.Operator:
        if (props_Operator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Operator = cpb.create();
        }
        return props_Operator;
      case LanguageConceptSwitch.OperatorAdd:
        if (props_OperatorAdd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("+");
          props_OperatorAdd = cpb.create();
        }
        return props_OperatorAdd;
      case LanguageConceptSwitch.OperatorAnd:
        if (props_OperatorAnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&&");
          props_OperatorAnd = cpb.create();
        }
        return props_OperatorAnd;
      case LanguageConceptSwitch.OperatorAssign:
        if (props_OperatorAssign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("=");
          props_OperatorAssign = cpb.create();
        }
        return props_OperatorAssign;
      case LanguageConceptSwitch.OperatorEquals:
        if (props_OperatorEquals == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("==");
          props_OperatorEquals = cpb.create();
        }
        return props_OperatorEquals;
      case LanguageConceptSwitch.OperatorGreaterThan:
        if (props_OperatorGreaterThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_OperatorGreaterThan = cpb.create();
        }
        return props_OperatorGreaterThan;
      case LanguageConceptSwitch.OperatorLessThan:
        if (props_OperatorLessThan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_OperatorLessThan = cpb.create();
        }
        return props_OperatorLessThan;
      case LanguageConceptSwitch.OperatorMultiply:
        if (props_OperatorMultiply == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("*");
          props_OperatorMultiply = cpb.create();
        }
        return props_OperatorMultiply;
      case LanguageConceptSwitch.OperatorOr:
        if (props_OperatorOr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("||");
          props_OperatorOr = cpb.create();
        }
        return props_OperatorOr;
      case LanguageConceptSwitch.ReferenceExpression:
        if (props_ReferenceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L, 0x6930950f81a11a82L, "reference", "", "");
          props_ReferenceExpression = cpb.create();
        }
        return props_ReferenceExpression;
      case LanguageConceptSwitch.Worksheet:
        if (props_Worksheet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Worksheet = cpb.create();
        }
        return props_Worksheet;
    }
    return null;
  }
}
