package ExerciseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BooleanDeclaration;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_IVariableDeclaration;
  private ConceptPresentation props_IWorksheetDeclaration;
  private ConceptPresentation props_IWorksheetExpression;
  private ConceptPresentation props_IntegerDeclaration;
  private ConceptPresentation props_VariableReference;
  private ConceptPresentation props_Worksheet;
  private ConceptPresentation props_Worksheets;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BooleanDeclaration:
        if (props_BooleanDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BooleanDeclaration = cpb.create();
        }
        return props_BooleanDeclaration;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyLine");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.IVariableDeclaration:
        if (props_IVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IVariableDeclaration = cpb.create();
        }
        return props_IVariableDeclaration;
      case LanguageConceptSwitch.IWorksheetDeclaration:
        if (props_IWorksheetDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IWorksheetDeclaration = cpb.create();
        }
        return props_IWorksheetDeclaration;
      case LanguageConceptSwitch.IWorksheetExpression:
        if (props_IWorksheetExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IWorksheetExpression = cpb.create();
        }
        return props_IWorksheetExpression;
      case LanguageConceptSwitch.IntegerDeclaration:
        if (props_IntegerDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntegerDeclaration = cpb.create();
        }
        return props_IntegerDeclaration;
      case LanguageConceptSwitch.VariableReference:
        if (props_VariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ref");
          props_VariableReference = cpb.create();
        }
        return props_VariableReference;
      case LanguageConceptSwitch.Worksheet:
        if (props_Worksheet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Worksheet = cpb.create();
        }
        return props_Worksheet;
      case LanguageConceptSwitch.Worksheets:
        if (props_Worksheets == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("worksheets");
          props_Worksheets = cpb.create();
        }
        return props_Worksheets;
    }
    return null;
  }
}
