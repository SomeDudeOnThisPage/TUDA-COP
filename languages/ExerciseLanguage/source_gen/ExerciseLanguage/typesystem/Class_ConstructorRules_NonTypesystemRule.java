package ExerciseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import ExerciseLanguage.behavior.ClassConcept__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class Class_ConstructorRules_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public Class_ConstructorRules_NonTypesystemRule() {
  }
  public void applyRule(final SNode clazz, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz) == null) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportInfo(clazz, "class has no constructor", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164732214395", null, errorTarget);
      }
      return;
    }

    if (SPropertyOperations.getEnum(ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz), PROPS.return$LCYD) != SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc7951c5424L, "ExerciseLanguage.structure.Type"), 0x79adcda68a7fe881L, "VOID")) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz), "constructor return type must be of type void", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164732226730", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ClassConcept$S3;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty return$LCYD = MetaAdapterFactory.getProperty(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, 0x53d99cc7951c5b45L, "return");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ClassConcept$S3 = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e6e1429L, "ExerciseLanguage.structure.ClassConcept");
  }
}
