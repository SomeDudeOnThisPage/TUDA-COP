package ExerciseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import ExerciseLanguage.behavior.IEvaluatable__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class FunctionDeclaration_TypeMismatch_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public FunctionDeclaration_TypeMismatch_NonTypesystemRule() {
  }
  public void applyRule(final SNode d, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode statement : ListSequence.fromList(SNodeOperations.getNodeDescendants(d, CONCEPTS.Return$70, false, new SAbstractConcept[]{}))) {
      if (SPropertyOperations.getEnum(d, PROPS.return$LCYD) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc7951c5424L, "ExerciseLanguage.structure.Type"), 0x79adcda68a7fe881L, "VOID")) {
        if (SLinkOperations.getTarget(statement, LINKS.expression$ySOJ) != null && IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(statement, LINKS.expression$ySOJ)) != SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc7951c5424L, "ExerciseLanguage.structure.Type"), 0x79adcda68a7fe881L, "VOID")) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(statement, "type mismatch - function of type void must return void type", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164734607008", null, errorTarget);
          }
        }
        return;
      }

      if (IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(statement, LINKS.expression$ySOJ)) != SPropertyOperations.getEnum(d, PROPS.return$LCYD)) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(statement, "type mismatch - " + SPropertyOperations.getEnum(d, PROPS.return$LCYD) + " expected, got " + IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(statement, LINKS.expression$ySOJ)), "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "1582215606041412251", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.FunctionDeclaration$9R;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink expression$ySOJ = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f42bcef3L, 0x15f528b5f42bcef6L, "expression");
  }

  private static final class PROPS {
    /*package*/ static final SProperty return$LCYD = MetaAdapterFactory.getProperty(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, 0x53d99cc7951c5b45L, "return");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Return$70 = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x15f528b5f42bcef3L, "ExerciseLanguage.structure.Return");
    /*package*/ static final SConcept FunctionDeclaration$9R = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, "ExerciseLanguage.structure.FunctionDeclaration");
  }
}
