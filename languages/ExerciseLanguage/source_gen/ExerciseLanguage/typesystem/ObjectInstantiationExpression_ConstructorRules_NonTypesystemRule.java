package ExerciseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import ExerciseLanguage.behavior.ClassConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import ExerciseLanguage.behavior.IEvaluatable__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class ObjectInstantiationExpression_ConstructorRules_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public ObjectInstantiationExpression_ConstructorRules_NonTypesystemRule() {
  }
  public void applyRule(final SNode expression, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode clazz = SLinkOperations.getTarget(expression, LINKS.class$q9gJ);
    if (ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz) == null && ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).count() == 0) {
      // intended behaviour
      return;
    }

    if (ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz) == null && ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).count() > 0) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(expression, "cannot instantiate object with parameters - no matching constructor found", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164729266617", null, errorTarget);
      }
      return;
    }

    SNode[] parameters = ListSequence.fromList(SLinkOperations.getChildren(ClassConcept__BehaviorDescriptor.getConstructor_id7AHNqqakpgn.invoke(clazz), LINKS.parameters$7wvy)).toGenericArray(SNode.class);
    if (parameters.length != ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).last(), "wrong number of arguments - expected " + parameters.length + ", got " + ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).count(), "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164729341343", null, errorTarget);
      }
      return;
    }

    SNode[] arguments = ListSequence.fromList(SLinkOperations.getChildren(expression, LINKS.arguments$K7Xw)).toGenericArray(SNode.class);
    for (int i = 0; i < arguments.length; i++) {
      if (IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(arguments[i], LINKS.expression$aAnH)) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc7951c5424L, "ExerciseLanguage.structure.Type"), 0x79adcda68a7fe881L, "VOID")) {
        continue;
      }

      if (SPropertyOperations.getEnum(parameters[i], PROPS.type$Waki) != IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(arguments[i], LINKS.expression$aAnH))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(arguments[i], "type mismatch - " + SPropertyOperations.getEnum(parameters[i], PROPS.type$Waki) + " expected, got " + IEvaluatable__BehaviorDescriptor.getEvaluatedType_id1nPabnO2END.invoke(SLinkOperations.getTarget(arguments[i], LINKS.expression$aAnH)), "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8767890164729745167", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.ObjectInstantiationExpression$BS;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink class$q9gJ = MetaAdapterFactory.getReferenceLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a4cf814L, 0x79adcda68a4cf817L, "class");
    /*package*/ static final SContainmentLink arguments$K7Xw = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a4cf814L, 0x79adcda68a4d06a3L, "arguments");
    /*package*/ static final SContainmentLink parameters$7wvy = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL, 0x665cd7dc02f6696cL, "parameters");
    /*package*/ static final SContainmentLink expression$aAnH = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x39275cb10e726720L, 0x39275cb10e726721L, "expression");
  }

  private static final class PROPS {
    /*package*/ static final SProperty type$Waki = MetaAdapterFactory.getProperty(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebcef043L, 0x15f528b5f406b12fL, "type");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ObjectInstantiationExpression$BS = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x79adcda68a4cf814L, "ExerciseLanguage.structure.ObjectInstantiationExpression");
  }
}
