package ExerciseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class OperatorAssign_LeftSideDeclarationCheck_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public OperatorAssign_LeftSideDeclarationCheck_NonTypesystemRule() {
  }
  public void applyRule(final SNode operator, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(operator), CONCEPTS.BinaryExpression$lR)) || !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(operator), CONCEPTS.BinaryExpression$lR), LINKS.left$sOE2), CONCEPTS.DeclarationExpression$SU)) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(operator), CONCEPTS.BinaryExpression$lR), LINKS.left$sOE2), CONCEPTS.ReferenceExpression$ih))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(operator), CONCEPTS.BinaryExpression$lR), LINKS.left$sOE2), "left hand side of assignment operator must be declaration or assignment", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "8792019846674997317", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.OperatorAssign$YA;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BinaryExpression$lR = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, "ExerciseLanguage.structure.BinaryExpression");
    /*package*/ static final SConcept ReferenceExpression$ih = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x6930950f81a11a81L, "ExerciseLanguage.structure.ReferenceExpression");
    /*package*/ static final SConcept DeclarationExpression$SU = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x7a038777eb3e63d8L, "ExerciseLanguage.structure.DeclarationExpression");
    /*package*/ static final SConcept OperatorAssign$YA = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675c62f7eL, "ExerciseLanguage.structure.OperatorAssign");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink left$sOE2 = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, 0x5261d8e675bc9b1dL, "left");
  }
}
