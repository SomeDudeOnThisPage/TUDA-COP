package ExerciseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import ExerciseLanguage.behavior.Operator__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import ExerciseLanguage.behavior.IExpression__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_BinaryExpression_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BinaryExpression_NonTypesystemRule() {
  }
  public void applyRule(final SNode b, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (Operator__BehaviorDescriptor.getExpectedType_id5fpBcul7cQ7.invoke(SLinkOperations.getTarget(b, LINKS.operator$sU3p)) != SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc7951c5424L, "ExerciseLanguage.structure.ExpressionEvaluationType"), 0x53d99cc7951ef8beL, "IDGAF") && (Operator__BehaviorDescriptor.getExpectedType_id5fpBcul7cQ7.invoke(SLinkOperations.getTarget(b, LINKS.operator$sU3p)) != IExpression__BehaviorDescriptor.getEvaluatedType_id5fpBcul75FE.invoke(SLinkOperations.getTarget(b, LINKS.left$sOE2)) || Operator__BehaviorDescriptor.getExpectedType_id5fpBcul7cQ7.invoke(SLinkOperations.getTarget(b, LINKS.operator$sU3p)) != IExpression__BehaviorDescriptor.getEvaluatedType_id5fpBcul75FE.invoke(SLinkOperations.getTarget(b, LINKS.right$sUKs)))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(b, LINKS.operator$sU3p), "operator type mismatch - " + Operator__BehaviorDescriptor.getExpectedType_id5fpBcul7cQ7.invoke(SLinkOperations.getTarget(b, LINKS.operator$sU3p)).toString() + " expected, got [" + IExpression__BehaviorDescriptor.getEvaluatedType_id5fpBcul75FE.invoke(SLinkOperations.getTarget(b, LINKS.left$sOE2)).toString() + "|" + IExpression__BehaviorDescriptor.getEvaluatedType_id5fpBcul75FE.invoke(SLinkOperations.getTarget(b, LINKS.right$sUKs)).toString() + "]", "r:596e03c7-07b8-4f47-94c3-e3804da5cccc(ExerciseLanguage.typesystem)", "6042032756108543800", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BinaryExpression$lR;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink operator$sU3p = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, 0x5261d8e675bc9b1fL, "operator");
    /*package*/ static final SContainmentLink left$sOE2 = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, 0x5261d8e675bc9b1dL, "left");
    /*package*/ static final SContainmentLink right$sUKs = MetaAdapterFactory.getContainmentLink(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, 0x5261d8e675bc9b22L, "right");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BinaryExpression$lR = MetaAdapterFactory.getConcept(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bb66a4L, "ExerciseLanguage.structure.BinaryExpression");
  }
}
