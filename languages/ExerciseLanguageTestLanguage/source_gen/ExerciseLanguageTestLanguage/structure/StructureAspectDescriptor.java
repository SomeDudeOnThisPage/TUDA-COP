package ExerciseLanguageTestLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAssertBoolean = createDescriptorForAssertBoolean();
  /*package*/ final ConceptDescriptor myConceptAssertInteger = createDescriptorForAssertInteger();
  /*package*/ final ConceptDescriptor myConceptIAssert = createDescriptorForIAssert();
  /*package*/ final ConceptDescriptor myConceptTest = createDescriptorForTest();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x97a51900650f4519L, 0xa79289e9b2b161cbL, "ExerciseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAssertBoolean, myConceptAssertInteger, myConceptIAssert, myConceptTest);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AssertBoolean:
        return myConceptAssertBoolean;
      case LanguageConceptSwitch.AssertInteger:
        return myConceptAssertInteger;
      case LanguageConceptSwitch.IAssert:
        return myConceptIAssert;
      case LanguageConceptSwitch.Test:
        return myConceptTest;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAssertBoolean() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExerciseLanguageTestLanguage", "AssertBoolean", 0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x33a2ae11f0a1f024L);
    b.class_(false, false, false);
    b.parent(0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca9L);
    b.origin("r:eafda21a-bfa6-4802-8e76-d7d1da024b64(ExerciseLanguageTestLanguage.structure)/3720727634236272676");
    b.version(3);
    b.aggregate("function", 0x33a2ae11f0a1f0a7L).target(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L).optional(false).ordered(true).multiple(false).origin("3720727634236272807").done();
    b.aggregate("check", 0x33a2ae11f0a1f0a8L).target(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x53d99cc795194f20L).optional(true).ordered(true).multiple(false).origin("3720727634236272808").done();
    b.alias("bool");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertInteger() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExerciseLanguageTestLanguage", "AssertInteger", 0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x33a2ae11f0a1f025L);
    b.class_(false, false, false);
    b.parent(0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca9L);
    b.origin("r:eafda21a-bfa6-4802-8e76-d7d1da024b64(ExerciseLanguageTestLanguage.structure)/3720727634236272677");
    b.version(3);
    b.aggregate("function", 0x660682a577a5c340L).target(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefa4L).optional(false).ordered(true).multiple(false).origin("7351707088917480256").done();
    b.aggregate("check", 0x660682a577a5c341L).target(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x5261d8e675bf57e9L).optional(false).ordered(true).multiple(false).origin("7351707088917480257").done();
    b.alias("int");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIAssert() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExerciseLanguageTestLanguage", "IAssert", 0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca9L);
    b.interface_();
    b.origin("r:eafda21a-bfa6-4802-8e76-d7d1da024b64(ExerciseLanguageTestLanguage.structure)/7351707088917544105");
    b.version(3);
    b.associate("reference", 0x660682a577a70208L).target(0x97a51900650f4519L, 0xa79289e9b2b161cbL, 0x304de020ebceefcfL).optional(false).origin("7351707088917561864").done();
    b.aggregate("assert", 0x660682a577a6bcacL).target(0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca9L).optional(false).ordered(true).multiple(false).origin("7351707088917544108").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("ExerciseLanguageTestLanguage", "Test", 0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca8L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:eafda21a-bfa6-4802-8e76-d7d1da024b64(ExerciseLanguageTestLanguage.structure)/7351707088917544104");
    b.version(3);
    b.aggregate("asserts", 0x660682a577a6c6faL).target(0x18b74e1fdf5e4404L, 0x840c5428847e31a7L, 0x660682a577a6bca9L).optional(true).ordered(true).multiple(true).origin("7351707088917546746").done();
    b.alias("test");
    return b.create();
  }
}
